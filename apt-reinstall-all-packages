#!/usr/bin/env bash
# Re-install all packages on an APT-managed system, without changing (much) state.
#
# Copyright 2024 林博仁(Buo-ren, Lin) <buo.ren.lin+legal@gmail.com>
# SPDX-License-Identifier: CC-BY-SA-4.0+
EXCLUDED_PACKAGE_NAME_REGEXES=(
    # Fonts
    '^fonts-.*$'

    # Linux kernel packages
    '^linux-.*$'

    # Documentation packages
    '-doc$'

    # Development packages
    '-dev$'
)
START_FROM_PACKAGE="${START_FROM_PACKAGE:-}"

init(){
    if ! command -v date >/dev/null; then
        printf \
            'Error: This program requires the "date" utility to be available in your command search PATHs.\n' \
            1>&2
        exit 1
    fi
    printf \
        'Info: Determining the operation timestamp...\n'
    local operation_timestamp
    if ! operation_timestamp="$(
        date +%Y%m%d-%H%M%S
        )"; then
        printf \
            'Error: Unable to determine the operation timestamp.\n' \
            1>&2
        exit 2
    fi

    local log_file="${script_dir}/${script_name}-${operation_timestamp}.log"
    printf \
        'Info: Writing program log to "%s"...\n' \
        "${log_file}"
    if ! exec > >(tee "${log_file}") 2>&1; then
        printf \
            'Error: Unable to configure logging.\n' \
            1>&2
        exit 2
    fi

    print_progress \
        'The apt-reinstall-all-packages utility' \
        =

    if ! check_runtime_parameters; then
        printf \
            'Error: The runtime parameter check has failed.\n' \
            1>&2
        exit 1
    fi

    local -a installed_pkgs=()
    if test "${#script_args[@]}" -gt 0; then
        installed_pkgs=("${script_args[@]}")
    else
        print_progress \
            'Querying all the installed packages...'
        local dpkg_query_list_raw
        local -a dpkg_query_envs=(
            # Disable localization which will break our filtering logic
            LANG=C
        )
        # The parameter expansion-like syntax is owned by dpkg-query
        # shellcheck disable=SC2016
        local -a dpkg_query_opts=(
            # List packages using the specified --showformat
            --show
            --showformat='${Package} ${Status}\n'
        )
        if ! dpkg_query_list_raw="$(
            env "${dpkg_query_envs[@]}" \
                dpkg-query "${dpkg_query_opts[@]}"
            )"; then
            printf \
                'Error: Unable to query the list of the Debian packages and their statuses in the dpkg database.\n' \
                1>&2
            exit 2
        fi

        local dpkg_installed_raw
        local -a grep_opts=(
            # Use extended reguar expression instead of BRE
            --extended-regexp
        )
        if ! dpkg_installed_raw="$(
            grep "${grep_opts[@]}" 'installed$' <<<"${dpkg_query_list_raw}"
            )"; then
            printf \
                'Error: Unable to filter out the list of the Debian packages that are in the "installed" package state.\n' \
                1>&2
            exit 2
        fi

        local installed_pkgs_raw
        if ! installed_pkgs_raw="$(
            awk '{print $1}' <<<"${dpkg_installed_raw}"
            )"; then
            printf \
                'Error: Unable to parse out the package name from the dpkg-query query result.\n' \
                1>&2
            exit 2
        fi

        local -a mapfile_opts=(
            # Strip line endings from array members
            -t
        )
        if ! mapfile "${mapfile_opts[@]}" installed_pkgs <<<"${installed_pkgs_raw}"; then
            printf \
                'Error: Unable to populate the installed_pkgs array.\n' \
                1>&2
            exit 2
        fi

        local installed_pkgs_count="${#installed_pkgs[@]}"
        printf \
            'Info: Found %u installed packages.\n' \
            "${installed_pkgs_count}"
    fi

    print_progress \
        'Saving the automatically installed packages list...'
    printf \
        'Info: Saving the automatically installed packages list to a backup file...\n'
    local automatically_installed_packages_backup_file="${script_dir}/${script_name}-${operation_timestamp}.auto-installed-pkgs.txt"

    if ! apt-mark showauto \
        >"${automatically_installed_packages_backup_file}"; then
        printf \
            'Error: Unable to save the automatically installed packages list to a backup file.\n' \
            1>&2
        exit 2
    fi
    printf \
        'Info: Automatically installed packages list backed up to the "%s" file.\n' \
        "${automatically_installed_packages_backup_file}"

    local automatically_installed_packages_quantity_raw
    local -a wc_opts=(
        # Print the line count
        --lines
    )
    if ! automatically_installed_packages_quantity_raw="$(
        wc "${wc_opts[@]}" "${automatically_installed_packages_backup_file}"
        )"; then
        printf \
            'Error: Unable to determining the quantity of the automatically installed packages.\n' \
            1>&2
        exit 2
    fi
    local automatically_installed_packages_quantity
    automatically_installed_packages_quantity="${automatically_installed_packages_quantity_raw%% *}"

    printf \
        'Info: Found %u automatically installed packages.\n' \
        "${automatically_installed_packages_quantity}"

    if ! refresh_apt_local_cache; then
        printf \
            "Error: Unable to refresh the APT software management system's local cache.\\n" \
            1>&2
        return 2
    fi

    print_progress \
        'Re-installing all installed packages...'
    local -a failed_packages=()
    local flag_start_from_package_matched=false
    for package in "${installed_pkgs[@]}"; do
        if test -n "${START_FROM_PACKAGE}" \
            && test "${flag_start_from_package_matched}" == false; then
            if test "${package}" == "${START_FROM_PACKAGE}"; then
                flag_start_from_package_matched=true
            else
                continue
            fi
        fi

        for regex in "${EXCLUDED_PACKAGE_NAME_REGEXES[@]}"; do
            if [[ "${package}" =~ ${regex} ]]; then
                printf \
                    'Info: Skipping excluded package "%s"...\n' \
                    "${package}"
                continue 2
            fi
        done

        printf \
            'Info: Re-installing the "%s" package...\n' \
            "${package}"
        local -a apt_get_envs=(
            # Don't display Debconf prompts, always choose the default
            # answer
            DEBIAN_FRONTEND=noninteractive
        )
        local -a apt_get_opts=(
            # Specify the package should be re-installed
            --reinstall

            # Answer yes to prompts
            --assume-yes
        )
        if ! env "${apt_get_envs[@]}" \
            apt-get install "${apt_get_opts[@]}" "${package}"; then
            printf \
                'Warning: Unable to re-install the "%s" package.\n' \
                "${package}" \
                1>&2
            failed_packages+=("${package}")
        fi

        # If the package is previously set to be automatically
        # installed, mark it back to be so
        local -a grep_opts=(
            # Use extended reguar expression instead of BRE
            --extended-regexp

            # Do not write anything to the standard output and
            # only use exit status to indicate whether the pattern
            # is matched
            --quiet
        )
        local regex_package_name
        regex_package_name="^$(convert_dpkg_name_to_regex "${package}")\$"
        if grep "${grep_opts[@]}" "${regex_package_name}" \
            "${automatically_installed_packages_backup_file}"; then
            printf \
                'Info: The "%s" package is previously automatically installed, restoring the state...\n' \
                "${package}"
            if ! apt-mark auto "${package}"; then
                printf \
                    'Error: Unable to mark "%s" package as automatically installed.\n' \
                    "${package}" \
                    1>&2
                exit 2
            fi
        fi
    done

    if test "${#failed_packages[@]}" -gt 0; then
        print_progress \
            'Operation completed with the following packages failed to re-install, please check:'
        for package in "${failed_packages[@]}"; do
            printf \
                '* %s\n' \
                "${package}"
        done
    else
        print_progress \
            'Operation completed without errors.'
    fi
}

# Convert a Debian package name to a valid regular expression
# pattern
convert_dpkg_name_to_regex(){
    local package_name="${1}"; shift

    local result="${package_name}"
    result="${result//./\\.}"
    result="${result//+/\\+}"

    printf '%s' "${result}"
}

# Generate or refresh the APT software management system's local cache
# when necessary
refresh_apt_local_cache(){
    print_progress \
        'Refreshing APT local cache when necessary...'
    local apt_archive_cache_mtime_epoch
    if ! apt_archive_cache_mtime_epoch="$(
        stat \
            --format=%Y \
            /var/cache/apt/archives
        )"; then
        printf \
            'Error: Unable to query the modification time of the APT software sources cache directory.\n' \
            1>&2
        return 2
    fi

    local current_time_epoch
    if ! current_time_epoch="$(
        date +%s
        )"; then
        printf \
            'Error: Unable to query the current time.\n' \
            1>&2
        return 2
    fi

    if test "$((current_time_epoch - apt_archive_cache_mtime_epoch))" -lt 86400; then
        printf \
            'Info: The last refresh time is less than 1 day, skipping...\n'
    else
        printf \
            'Info: Refreshing the APT local package cache...\n'
        if ! apt-get update; then
            printf \
                'Error: Unable to refresh the APT local package cache.\n' \
                1>&2
            return 2
        fi
    fi
}

# print progress report message with additional styling
#
# Positional parameters:
#
# progress_msg: Progress report message text
# separator_char: Character used in the separator
print_progress(){
    local progress_msg="${1}"; shift
    local separator_char
    if test "${#}" -gt 0; then
        if test "${#1}" -ne 1; then
            printf -- \
                '%s: FATAL: The separator_char positional parameter only accept a single character as its argument.\n' \
                "${FUNCNAME[0]}" \
                1>&2
            exit 99
        fi
        separator_char="${1}"; shift
    else
        separator_char=-
    fi

    local separator_string=
    local -i separator_length

    # NOTE: COLUMNS shell variable is not available in
    # non-noninteractive shell
    # FIXME: This calculation is not correct for double-width characters
    # (e.g. 中文)
    # https://www.reddit.com/r/bash/comments/gynqa0/how_to_determine_character_width_for_special/
    separator_length="${#progress_msg}"

    # Reduce costly I/O operations
    local separator_block_string=
    local -i \
        separator_block_length=10 \
        separator_blocks \
        separator_remain_units
    separator_blocks="$(( separator_length / separator_block_length ))"
    separator_remain_units="$(( separator_length % separator_block_length ))"

    local -i i j k
    for ((i = 0; i < separator_block_length; i = i + 1)); do
        separator_block_string+="${separator_char}"
    done
    for ((j = 0; j < separator_blocks; j = j + 1)); do
        separator_string+="${separator_block_string}"
    done
    for ((k = 0; k < separator_remain_units; k = k + 1)); do
        separator_string+="${separator_char}"
    done

    printf \
        '\n%s\n%s\n%s\n' \
        "${separator_string}" \
        "${progress_msg}" \
        "${separator_string}"
}

# Check whether the running user is acceptible
#
# Return values:
#
# * 0: Check success
# * 1: Prerequisite failed
# * 2: Generic error
# * 3: Check failed
check_running_user(){
    local -a required_commands=(
        # For querying the current username
        whoami
    )
    local required_command_check_failed=false
    for command in "${required_commands[@]}"; do
        if ! command -v "${command}" >/dev/null; then
            printf \
                '%s: Error: This function requires the "%s" command to be available in your command search PATHs.\n' \
                "${FUNCNAME[0]}" \
                "${command}" \
                1>&2
            required_command_check_failed=true
        fi
    done
    if test "${required_command_check_failed}" == true; then
        printf \
            '%s: Error: Required command check failed.\n' \
            "${FUNCNAME[0]}" \
            1>&2
        return 1
    fi

    printf 'Info: Checking running user...\n'
    if test "${EUID}" -ne 0; then
        printf \
            'Error: This program requires to be run as the superuser(root).\n' \
            1>&2
        return 2
    else
        local running_user
        if ! running_user="$(whoami)"; then
            printf \
                "Error: Unable to query the runnning user's username.\\n" \
                1>&2
            return 2
        fi
        printf \
            'Info: The running user is acceptible(%s).\n' \
            "${running_user}"
    fi
}

# Check whether all the required commands are available in the command
# search PATHs
check_required_commands(){
    printf \
        'Info: Checking required commands...\n'
    local -a required_commands=(
        # For fetching the APT software archive metadata and
        # package re-installation
        apt-get

        # For querying the automatically installed packages list
        apt-mark

        # For filtering the packages that are in the installed state
        awk
        grep

        # For determining the current time, used in refresh_apt_local_cache
        date

        # For querying the installed packages list
        dpkg-query

        # For setting environment variable for specific command
        # calls
        env

        # For determining the APT local cache creation time, used in
        # refresh_apt_local_cache
        stat
    )
    local flag_required_command_check_failed=false
    for command in "${required_commands[@]}"; do
        if ! command -v "${command}" >/dev/null; then
            flag_required_command_check_failed=true
            printf \
                'Error: This program requires the "%s" command to be available in your command search PATHs.\n' \
                "${command}" \
                1>&2
        fi
    done
    if test "${flag_required_command_check_failed}" == true; then
        printf \
            'Error: Required command check failed, please check your installation.\n' \
            1>&2
        return 2
    fi
}

check_runtime_parameters(){
    print_progress 'Checking the runtime parameters of this program...'

    if ! check_running_user; then
        printf \
            'Error: Running user check failed.\n' \
            1>&2
        return 2
    fi

    if ! check_required_commands; then
        printf \
            'Error: Required command check has failed.\n' \
            1>&2
        return 2
    fi
}

printf \
    'Info: Configuring the defensive interpreter behaviors...\n'
set_opts=(
    # Terminate script execution when an unhandled error occurs
    -o errexit
    -o errtrace

    # Terminate script execution when an unset parameter variable is
    # referenced
    -o nounset
)
if ! set "${set_opts[@]}"; then
    printf \
        'Error: Unable to configure the defensive interpreter behaviors.\n' \
        1>&2
    exit 1
fi

printf \
    'Info: Checking the existence of the required commands...\n'
required_commands=(
    realpath
)
flag_required_command_check_failed=false
for command in "${required_commands[@]}"; do
    if ! command -v "${command}" >/dev/null; then
        flag_required_command_check_failed=true
        printf \
            'Error: This program requires the "%s" command to be available in your command search PATHs.\n' \
            "${command}" \
            1>&2
    fi
done
if test "${flag_required_command_check_failed}" == true; then
    printf \
        'Error: Required command check failed, please check your installation.\n' \
        1>&2
    exit 1
fi

if test -v BASH_SOURCE; then
    printf \
        'Info: Configuring the convenience variables...\n'
    # Convenience variables may not need to be referenced
    # shellcheck disable=SC2034
    {
        printf \
            'Info: Determining the absolute path of the program...\n'
        if ! script="$(
            realpath \
                --strip \
                "${BASH_SOURCE[0]}"
            )"; then
            printf \
                'Error: Unable to determine the absolute path of the program.\n' \
                1>&2
            exit 1
        fi
        script_dir="${script%/*}"
        script_filename="${script##*/}"
        script_name="${script_filename%%.*}"
    }
fi
# Convenience variables may not need to be referenced
# shellcheck disable=SC2034
{
    script_basecommand="${0}"
    script_args=("${@}")
}

trap_err(){
    printf \
        'Error: The program has encountered an unhandled error and is prematurely aborted.\n' \
        1>&2
}

printf \
    'Info: Setting the ERR trap...\n'
if ! trap trap_err ERR; then
    printf \
        'Error: Unable to set the ERR trap.\n' \
        1>&2
    exit 1
fi

init
